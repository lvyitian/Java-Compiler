/**
* @author Zach Jones (zachtjones16@gmail.com)
* This file generates the parser, using JavaCC
* Some parts of this file are taken from the examples in JavaCC documentation.
*/

options {
    // instances so we can have multiple at same time
    STATIC = false;
}

PARSER_BEGIN(JavaParser)
package main;

import java.io.FileNotFoundException;
import java.io.FileInputStream;
import tree.*;
import java.util.ArrayList;
import java.nio.charset.Charset;
import helper.Types;

// hide the warnings from dead code -- there's no way to block it
@SuppressWarnings("unused")
public class JavaParser {

    public String fileName;

    public static CompilationUnit parse(String file) throws FileNotFoundException, ParseException {
        JavaParser parser = new JavaParser(new FileInputStream(file), Charset.defaultCharset());
        parser.fileName = file;
        return parser.CompilationUnit(file);
    }

}

PARSER_END(JavaParser)

/* Now specify the lexer commands */

SKIP : /* WHITE SPACE */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SPECIAL_TOKEN : /* Comments and Annotations */
{
  <LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <BLOCK_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <ANNOTATION: "@" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|   < #LETTER: [ "A"-"Z", "a"-"z", "_" ] >
|   < #DIGIT: [ "0"-"9" ] >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}


/*************  ACTUAL GRAMMAR NOW *******/
// the whole file is a compilation unit
CompilationUnit CompilationUnit(String filename) :
{
    CompilationUnit c = new CompilationUnit(fileName, token.beginLine);
    ImportNode temp;
    TypeDecNode temp2;
}
{
    [ c.packageName=PackageDeclaration() ]
    ( temp=ImportDeclaration() { c.imports.add(temp); } )*
    ( temp2=TypeDeclaration() { c.types.add(temp2); })*
    <EOF>
    {
        return c;
    }
}

NameNode PackageDeclaration() :
{
    NameNode n;
}
{
    "package" n=Name() ";"
    {
        return n;
    }
}

ImportNode ImportDeclaration() :
{
    ImportNode n = new ImportNode(fileName, token.beginLine);
}
{
    <IMPORT> n.name=Name()
    [ <DOT> <STAR> { n.isAll = true; } ]
    <SEMICOLON>
    {
        return n;
    }
}

TypeDecNode TypeDeclaration() :
{
    TypeDecNode t;
}
{
    LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
    t=ClassDeclaration()
    { return t; }

|   LOOKAHEAD( ( "abstract" | "public")* "interface" )
    t=ClassDeclaration()
    { return t; }

|   t=EnumDeclaration()
    { return t; }

|   <SEMICOLON>
    { return new NoOp(fileName, token.beginLine); }
}


/*
 * Declaration syntax follows.
 */

ClassNode ClassDeclaration() :
{
    ClassNode c = new ClassNode(fileName, token.beginLine);
    Token t;
    ClassBodyNode b;
}
{
    ( <ABSTRACT> { c.isAbstract=true; }
        | <FINAL> { c.isFinal=true; }
        | <PUBLIC> { c.isPublic=true; } )*
    <CLASS> t=<IDENTIFIER> [ c.typeParams=ClassTypeParameters() ]
    [ <EXTENDS> c.superclass=Name() ]
    [ <IMPLEMENTS> c.interfaces=NameList() ]
    <LBRACE> ( b=ClassBodyDeclaration() { c.body.add(b); } )* <RBRACE>
    {
        c.isInterface = false;
        c.name = t.image;
        return c;
    }
}

ArrayList<NameNode> ClassTypeParameters() :
{
    ArrayList<NameNode> n = new ArrayList<NameNode>();
    NameNode temp;
}
{
    <LT> temp=Name() { n.add(temp); }
    ( <COMMA> temp=Name() { n.add(temp); })* <GT>
    {
        return n;
    }
}

ClassBodyNode ClassBodyDeclaration() :
{
    ClassBodyNode c = new ClassBodyNode();
}
{
    LOOKAHEAD(2)
    c.staticInit=StaticInitializer()
    {
        return c;
    }
|
    LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
    c.constructor=ConstructorDeclaration()
    {
        return c;
    }
|
    LOOKAHEAD( MethodDeclarationLookahead() )
    c.method=MethodDeclaration()
    {
        return c;
    }
|
    c.field=FieldDeclaration()
    {
        return c;
    }
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() <IDENTIFIER> "("
}

ClassNode InterfaceDeclaration() :
{
    ClassNode c = new ClassNode(fileName, token.beginLine);
    ClassBodyNode b;
    Token t;
}
{
    ( <ABSTRACT> | <PUBLIC> )*
    <INTERFACE> t=<IDENTIFIER> { c.name = t.image; }
    [ <EXTENDS> c.supers=NameList() ]
    "{" ( b=InterfaceMemberDeclaration() { c.body.add(b); } )* "}"
    {
        c.isInterface = true;
        c.isAbstract = true;
        c.isPublic = true;
        return c;
    }
}

ClassBodyNode InterfaceMemberDeclaration() :
{
    ClassBodyNode c = new ClassBodyNode();
}
{
    LOOKAHEAD( MethodDeclarationLookahead() )
    c.method=MethodDeclaration()
    {
        c.method.isPublic = true;
        return c;
    }
|
    c.field=FieldDeclaration()
    {
        return c;
    }
}

EnumNode EnumDeclaration() :
{
    EnumNode e = new EnumNode(fileName, token.beginLine);
    Token t;
}
{
    (<PUBLIC>)* <ENUM> t=<IDENTIFIER> {e.name = t.image; }
    <LBRACE> e.values=EnumBody() <RBRACE>
    {
        return e;
    }
}

ArrayList<String> EnumBody() :
{
    ArrayList<String> a = new ArrayList<String>();
    Token t;
}
{ // the constants that could be the values of the ENUM
    t=<IDENTIFIER> { a.add(t.image); }
    ("," t=<IDENTIFIER> { a.add(t.image); })*
    {
        return a;
    }
}

FieldDeclarationNode FieldDeclaration() :
{
    FieldDeclarationNode f = new FieldDeclarationNode(fileName, token.beginLine);
    VariableDecNode v;
}
{
    ( <PUBLIC> { f.isPublic=true; } | <PROTECTED> { f.isProtected=true; }
    | <PRIVATE> { f.isPrivate=true; } | <STATIC> { f.isStatic=true; }
    | <FINAL> { f.isFinal=true; } | <TRANSIENT> { f.isTransient=true; }
    | <VOLATILE> { f.isVolatile=true; } )*
    f.type=Type() v=VariableDeclarator() { f.variables.add(v); }
    ( "," v=VariableDeclarator() { f.variables.add(v); } )* ";"
    {
        return f;
    }
}

VariableDecNode VariableDeclarator() :
{
    VariableDecNode v = new VariableDecNode(fileName, token.beginLine);
}
{
    v.id=VariableDeclaratorId() [ "=" v.init=VariableInitializer() ]
    {
        return v;
    }
}

VariableIdNode VariableDeclaratorId() :
{
    VariableIdNode v = new VariableIdNode(fileName, token.beginLine);
    Token t;
}
{
    t=<IDENTIFIER>{ v.name=t.image; }
    ( <LBRACKET> <RBRACKET> {v.numDimensions++; } )*
    {
        return v;
    }
}

VariableInitializerNode VariableInitializer() :
{
    VariableInitializerNode n = new VariableInitializerNode(fileName, token.beginLine);
    VariableInitializerNode temp;
}
{
    <LBRACE> [ temp=VariableInitializer() { n.nextLevel.add(temp); }
    ( LOOKAHEAD(2) <COMMA> temp=VariableInitializer() { n.nextLevel.add(temp); } )* ] [ "," ] <RBRACE>
    {
        return n;
    }
|
    n.e=Expression()
    {
        return n;
    }
}

MethodNode MethodDeclaration() :
{
    MethodNode m = new MethodNode();
}
{
    ( <PUBLIC> { m.isPublic=true;} | <PROTECTED> { m.isProtected=true; }
    | <PRIVATE> { m.isPrivate=true; } | <STATIC> { m.isStatic=true; }
    | <ABSTRACT> { m.isAbstract=true; } | <FINAL> { m.isFinal=true; }
    | <NATIVE> { m.isNative=true; } | <SYNCHRONIZED> { m.isSynchronized=true; } )*
    m.resultType=ResultType() m.dec=MethodDeclarator() [ <THROWS> m.throwsList=NameList() ]
    ( m.code=Block() | ";" )
    {
        return m;
    }
}

MethodDeclaratorNode MethodDeclarator() :
{
    MethodDeclaratorNode m = new MethodDeclaratorNode(fileName, token.beginLine);
    Token t;
}
{
    t=<IDENTIFIER> { m.name = t.image; }
    m.params=FormalParameters() ( <LBRACKET> <RBRACKET>{ m.arrayDims ++; } )*
    {
        return m;
    }
}

ArrayList<ParamNode> FormalParameters() :
{
    ArrayList<ParamNode> p = new ArrayList<ParamNode>();
    ParamNode temp;
}
{
    <LPAREN> [ temp=FormalParameter() { p.add(temp); }
    ( <COMMA> temp=FormalParameter() { p.add(temp); })* ] <RPAREN>
    {
        return p;
    }
}

ParamNode FormalParameter() :
{
    ParamNode p = new ParamNode(fileName, token.beginLine);
}
{
    p.type=Type() [<ELLIPSIS> { p.isVarargs=true; }] p.id=VariableDeclaratorId()
    {
        return p;
    }
}

ConstructorNode ConstructorDeclaration() :
{
    ConstructorNode c = new ConstructorNode(fileName, token.beginLine);
    Token t;
    BlockStatementNode b;
}
{
    [ <PUBLIC> { c.isPublic = true; }
    | <PROTECTED> {c.isProtected = true;}
    | <PRIVATE> {c.isPrivate = true; } ]
    t=<IDENTIFIER> { c.name = t.image; }
    c.params=FormalParameters()
    [ <THROWS> c.throwsList=NameList() ]
    <LBRACE> [ LOOKAHEAD(2) ExplicitConstructorInvocation() ]
    ( b=BlockStatement() { c.code.add(b); } )* <RBRACE>
    {
        return c;
    }
}

void ExplicitConstructorInvocation() :
{}
{
  "this" Arguments() ";"
|
  "super" Arguments() ";"
}

BlockNode StaticInitializer() :
{
    BlockNode b;
}
{
  "static" b=Block() { return b; }
}


/*
 * Type, name and expression syntax follows.
 */

Types Type() :
{
    Types t;
    NameNode n;
}
{
    ( t=PrimitiveType() | n=Name() { t = Types.fromFullyQualifiedClass(n.primaryName); } )
    ( <LBRACKET> <RBRACKET>{ t = Types.arrayOf(t); } )*
    { return t; }
}

Types PrimitiveType() :
{}
{
    <BOOLEAN> { return Types.BOOLEAN; }
|   <CHAR> { return Types.CHAR; }
|   <BYTE> { return Types.BYTE; }
|   <SHORT> { return Types.SHORT; }
|   <INT> { return Types.INT; }
|   <LONG> { return Types.LONG; }
|   <FLOAT> { return Types.FLOAT; }
|   <DOUBLE> { return Types.DOUBLE; }
}

Types ResultType() :
{
    Types r;
}
{
  <VOID> { return Types.VOID; }
|
  r=Type() { return r; }
}

NameNode Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 * Also support generics, making this require even more lookahead
 */
{
    NameNode n = new NameNode(fileName, token.beginLine);
    Token t;
    NameNode temp;
}
{
    // need to make this so that NameNode isn't recursively defined, so that
    //  we can make another method for the bounds, since you can have a list
    //  of them using super and extends, list is separated with '&'
    t=<IDENTIFIER> { n.primaryName = t.image; }
    ( LOOKAHEAD(2) "." t=<IDENTIFIER> {
        n.primaryName += "." + t.image;
    } )*
    ( LOOKAHEAD(<LT> GenericList() <GT>) <LT> n.generics=GenericList() <GT>)?
    {
        return n;
    }
}

ArrayList<GenericNode> GenericList() :
{
    ArrayList<GenericNode> n = new ArrayList<GenericNode>();
    GenericNode temp;
}
{
    temp=Generic(){ n.add(temp); }
    ( <COMMA> temp=Generic() { n.add(temp); } )*
    {
        return n;
    }
}

GenericNode Generic():
{
    GenericNode g = new GenericNode(fileName, token.beginLine);
    NameNode temp;
}
{
    (( g.extends1=Name() [<EXTENDS> g.extends2=Name()] )
    |
    ( <HOOK> (<EXTENDS> g.hookExtends=BoundList()) | (<SUPER> g.hookSuper=BoundList()) ))
    {
        return g;
    }
}

ArrayList<NameNode> BoundList() :
{
    ArrayList<NameNode> n = new ArrayList<NameNode>();
    NameNode temp;
}
{
    temp=Name(){ n.add(temp); }
    ( <BIT_AND> temp=Name() { n.add(temp); } )*
    {
        return n;
    }
}


ArrayList<NameNode> NameList() :
{
    ArrayList<NameNode> n = new ArrayList<NameNode>();
    NameNode temp;
}
{
    temp=Name(){ n.add(temp); }
    ( <COMMA> temp=Name() { n.add(temp); } )*
    {
        return n;
    }
}


/*
 * Expression syntax follows.
 */

Expression Expression() :
{
    Expression temp;
}
{
    LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
    temp=Assignment() { return temp; }
|
    temp=ConditionalExpression() { return temp; }
}

AssignmentNode Assignment() :
{
    Expression left;
    BinaryOperation type;
    Expression right;
}
{
    left = PrimaryExpression()
    type = AssignmentOperator()
    right = Expression()
    {
        return new AssignmentNode(fileName, token.beginLine, left, right, type);
    }
}

/** Returns null if the assignment is just a regular =, otherwise the binary operation constant */
BinaryOperation AssignmentOperator() :
{}
{
    "=" { return null; }
|   "*=" { return BinaryOperation.TIMES; }
|   "/=" { return BinaryOperation.DIVIDE; }
|   "%=" { return BinaryOperation.MOD; }
|   "+=" { return BinaryOperation.ADD; }
|   "-=" { return BinaryOperation.SUBTRACT; }
|   "<<=" { return BinaryOperation.LEFT_SHIFT; }
|   ">>=" { return BinaryOperation.RIGHT_SHIFT_SIGN; }
|   ">>>=" { return BinaryOperation.RIGHT_SHIFT_UNSIGNED; }
|   "&=" { return BinaryOperation.AND; }
|   "^=" { return BinaryOperation.XOR; }
|   "|=" { return BinaryOperation.OR; }
}

/* return an Expression since we don't know if it's a
*  ConditionalExpression or the next level down */
Expression ConditionalExpression() :
{
    ConditionalExpressionNode e = new ConditionalExpressionNode(fileName, token.beginLine);
    Expression temp;
}
{
    temp=ConditionalOrExpression()
    [ "?" e.truePart=Expression() ":" e.falsePart=ConditionalExpression() ]
    {
        if (e.truePart == null) {
            return temp;
        } else {
            e.condition = temp;
            return e;
        }
    }
}

Expression ConditionalOrExpression() :
{
    /* Build up a binary tree */
    Expression one;
    Expression two;
}
{
    one=ConditionalAndExpression()
    ( "||" two=ConditionalAndExpression()
    {
        ConditionalOrExpressionNode e = new ConditionalOrExpressionNode(fileName, token.beginLine);
        e.left = one;
        e.right = two;
        one = e;
    } )*
    {
        return one;
    }
}

Expression ConditionalAndExpression() :
{
    /* Build up a binary tree */
    Expression one;
    Expression two;
}
{
    one=InclusiveOrExpression()
    ( "&&" two=InclusiveOrExpression()
    {
        ConditionalAndExpressionNode e = new ConditionalAndExpressionNode(fileName, token.beginLine);
        e.left = one;
        e.right = two;
        one = e;
    } )*
    {
        return one;
    }
}

Expression InclusiveOrExpression() :
{
    Expression one;
    Expression two;
}
{
    one=ExclusiveOrExpression()
    ( "|" two=ExclusiveOrExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, BinaryOperation.OR);
        one = node;
    } )*
    {
        return one;
    }
}

Expression ExclusiveOrExpression() :
{
    Expression one;
    Expression two;
}
{
    // same -- transform into the binary tree of ^ operations, if there are any
    one=AndExpression()
    ( "^" two=AndExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, BinaryOperation.XOR);
        one = node;
    } )*
    {
        return one;
    }
}

Expression AndExpression() :
{
    Expression one;
    Expression two;
}
{
    // transform the list into the binary tree of & operations, if there are any
    one=EqualityExpression()
    ( "&" two=EqualityExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, BinaryOperation.AND);
        one = node;
    } )*
    {
        return one;
    }
}

Expression EqualityExpression() :
{
    // this one is different than the other ones in that instead
    //  of keeping an ArrayList, we convert it into a binary tree
    //  the first two parsed become the leaf nodes

    Expression one;
    Expression two;
    boolean isEqual;
}
{
    one=InstanceOfExpression()
    ( ( "==" { isEqual = true; }
      | "!=" { isEqual = false; })
    two=InstanceOfExpression()
    {
        if (isEqual) {
            EqualityExpressionNode eq = new EqualityExpressionNode(fileName, token.beginLine);
            eq.left = one;
            eq.right = two;
            one = eq; // base for next tree element
        } else {
            NotEqualityExpressionNode neq = new NotEqualityExpressionNode(fileName, token.beginLine);
            neq.left = one;
            neq.right = two;
            one = neq; // base for next tree element
        }
    })*
    {
        // one is built up, or just the expression
        return one;
    }
}

Expression InstanceOfExpression() :
{
    InstanceOfExpressionNode e = new InstanceOfExpressionNode(fileName, token.beginLine);
    Expression temp;
    Types t;
}
{
    temp=RelationalExpression()
    [ "instanceof" t=Type() {
        e.left = temp;
        e.right = t;
        return e;
    } ]
    {
        // simple expression instead
        return temp;
    }
}

Expression RelationalExpression() :
{
    // this one is different than the other ones in that instead
    //  of keeping an ArrayList, we convert it into a binary tree
    //  the first two parsed become the leaf nodes

    Expression one;
    Expression two;
    int type;
}
{
    one=ShiftExpression()
    (
        ( "<" { type = 0; }
        | ">" { type = 1; }
        | "<=" { type = 2;}
        | ">=" { type = 3; })
        two=ShiftExpression()
        {
            if (type == 0) {
                LessThanExpressionNode lt = new LessThanExpressionNode(fileName, token.beginLine);
                lt.left = one;
                lt.right = two;
                one = lt;
            } else if (type == 1) {
                GreaterThanExpressionNode gt = new GreaterThanExpressionNode(fileName, token.beginLine);
                gt.left = one;
                gt.right = two;
                one = gt;
            } else if (type == 2) {
                LessThanEqualExpressionNode lte = new LessThanEqualExpressionNode(fileName, token.beginLine);
                lte.left = one;
                lte.right = two;
                one = lte;
            } else {
                GreaterThanEqualExpressionNode gte = new GreaterThanEqualExpressionNode(fileName, token.beginLine);
                gte.left = one;
                gte.right = two;
                one = gte;
            }
        }
    )*
    {
        return one;
    }
}

Expression ShiftExpression() :
{
    Expression one;
    Expression two;
    BinaryOperation type;
}
{
    one=AdditiveExpression()
    ( ( "<<" { type = BinaryOperation.LEFT_SHIFT; }
    |   ">>" { type = BinaryOperation.RIGHT_SHIFT_SIGN; }
    |   ">>>" { type = BinaryOperation.RIGHT_SHIFT_UNSIGNED; })
    two=AdditiveExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, type);
        one = node;
    })*
    {
        return one;
    }
}

Expression AdditiveExpression() :
{
    Expression one;
    Expression two;
    BinaryOperation type;
}
{
    one=MultiplicativeExpression()
    ( ( "+" { type = BinaryOperation.ADD; }
    |   "-" { type = BinaryOperation.SUBTRACT; })
    two=MultiplicativeExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, type);
        one = node;
    })*
    {
        return one;
    }
}

Expression MultiplicativeExpression() :
{
    Expression one;
    Expression two;
    BinaryOperation type;
}
{
    one=UnaryExpression()
    ( ( "*" { type = BinaryOperation.TIMES; }
    |   "/" { type = BinaryOperation.DIVIDE; }
    |   "%" { type = BinaryOperation.MOD; })
    two=UnaryExpression()
    {
        BinaryExpressionNode node = new BinaryExpressionNode(fileName, token.beginLine, one, two, type);
        one = node;
    })*
    {
        return one;
    }
}

Expression UnaryExpression() :
{
    Expression e;
    boolean temp = false;
}
{
    ( "+" | "-" { temp = true; } )
    e=UnaryExpression()
    {
        if (temp) { // unary -
            UnaryMinusExpressionNode u = new UnaryMinusExpressionNode(fileName, token.beginLine);
            u.expr = e;
            return u;
        } else { // unary +, no meaning
            return e;
        }
    }
|
    e=PreIncrementExpression()
    {
        return e;
    }
|
    e=PreDecrementExpression()
    {
        return e;
    }
|
    e=UnaryExpressionNotPlusMinus()
    {
        return e;
    }
}

PreIncrementExpressionNode PreIncrementExpression() :
{
    PreIncrementExpressionNode e = new PreIncrementExpressionNode(fileName, token.beginLine);
}
{
    "++" e.expr=PrimaryExpression()
    {
        return e;
    }
}

PreDecrementExpressionNode PreDecrementExpression() :
{
    PreDecrementExpressionNode e = new PreDecrementExpressionNode(fileName, token.beginLine);
}
{
    "--" e.expr=PrimaryExpression()
    {
        return e;
    }
}

Expression UnaryExpressionNotPlusMinus() :
{
    Expression e;
    int type;
}
{
    ( "~" { type = 0;}
    | "!" { type = 1; })
    e=UnaryExpression()
    {
        if (type == 0) {
            return new BitwiseNotExpressionNode(fileName, token.beginLine, e);
        } else {
            LogicalNotExpressionNode l = new LogicalNotExpressionNode(fileName, token.beginLine);
            l.expr = e;
            return l;
        }
    }
|
    LOOKAHEAD( CastLookahead() )
    e=CastExpression()
    {
        return e; // can just return these, those rules do the logic
    }
|
    e=PostfixExpression()
    {
        return e;
    }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

Expression PostfixExpression() :
{
    Expression e;
    int type = 0;
}
{
    e=PrimaryExpression()
    [ "++" { type = 1;} | "--" { type = 2;}]
    {
        if (type == 0) {
            return e;
        } else if (type == 1) {
            PostIncrementExpressionNode p = new PostIncrementExpressionNode(fileName, token.beginLine);
            p.expr = e;
            return p;
        } else {
            PostDecrementExpressionNode p = new PostDecrementExpressionNode(fileName, token.beginLine);
            p.expr = e;
            return p;
        }
    }
}

Expression CastExpression() :
{
    PrimitiveCastExpressionNode p = new PrimitiveCastExpressionNode(fileName, token.beginLine);
    NameNode t;
    ObjectCastExpressionNode o = new ObjectCastExpressionNode(fileName, token.beginLine);
}
{
    LOOKAHEAD(2)
    "(" p.type=PrimitiveType()
    ( "[" "]" { p.arrayDims++; } )* ")"
    p.expr=UnaryExpression()
    {
        return p;
    }
|
    "(" t=Name()
    ( "[" "]" { o.arrayDims++; })* ")"
    o.expr=UnaryExpressionNotPlusMinus()
    {
        o.type = Types.fromFullyQualifiedClass(t.primaryName);
        return o;
    }
}

Expression PrimaryExpression() :
{
    PrimaryExpressionNode p = new PrimaryExpressionNode(fileName, token.beginLine);
    Expression temp;
}
{
    p.prefix=PrimaryPrefix()
    ( temp=PrimarySuffix() { p.suffixes.add(temp); } )*
    {
        if (p.suffixes.size() == 0) {
            return p.prefix; // just the prefix
        }
        return p; // the entire expression
    }
}

Expression PrimaryPrefix() :
{
    Expression temp;
    Token t;
}
{
    temp=Literal()
    {
        return temp;
    }
|
    temp=Name()
    {
        return temp;
    }
|
    "this"
    {
        return new ThisExpressionNode(fileName, token.beginLine);
    }
|
    "super" "." t=<IDENTIFIER>
    {
        SuperFieldExpressionNode s = new SuperFieldExpressionNode(fileName, token.beginLine);
        s.fieldName = t.image;
        return s;
    }
|
    // parentheses are for specifying tree order,
    // so don't need them in the result
    "(" temp=Expression() ")"
    {
        return temp;
    }
|
    temp=AllocationExpression()
    {
        return temp;
    }
}

Expression PrimarySuffix() :
{
    Expression temp;
    Token t;
}
{
    "[" temp=Expression() "]"
    {
        ArrayIndexExpressionNode a = new ArrayIndexExpressionNode(fileName, token.beginLine);
        a.expr = temp;
        return a;
    }
|
    "." t=<IDENTIFIER>
    {
        FieldExpressionNode f = new FieldExpressionNode(fileName, token.beginLine);
        f.identifier = t.image;
        return f;
    }
|
    temp=Arguments() // just grab the args
    {
        return temp;
    }
}

LiteralExpressionNode Literal() :
{
    Token t;
    LiteralExpressionNode l = new LiteralExpressionNode(fileName, token.beginLine);
}
{
    t=<INTEGER_LITERAL> { l.value = t.image; return l; }
|   t=<FLOATING_POINT_LITERAL> { l.value = t.image; return l; }
|   t=<CHARACTER_LITERAL> { l.value = t.image; return l; }
|   t=<STRING_LITERAL> { l.value = t.image; return l; }
|   t=<TRUE> { l.value = t.image; return l; }
|   t=<FALSE> { l.value = t.image; return l; }
|   t=<NULL> { l.value = t.image; return l; }
}

ArgumentExpressionNode Arguments() :
{
    ArgumentExpressionNode e = new ArgumentExpressionNode(fileName, token.beginLine);
}
{
    "(" [ e.expressions=ArgumentList() ] ")"
    {
        return e;
    }
}

ArrayList<Expression> ArgumentList() :
{
    ArrayList<Expression> a = new ArrayList<Expression>();
    Expression e;
}
{
    e=Expression() { a.add(e); }
    ( "," e=Expression() { a.add(e); })*
    {
        return a;
    }
}

Expression AllocationExpression() :
{
    Expression temp;
    ArrayList<Expression> list;
    Types p;
    NameNode n;
    ArgumentExpressionNode args;
}
{
    LOOKAHEAD(2)
    "new" p=PrimitiveType() list=ArrayDimensions()
    {
        PrimitiveArrayAllocationNode a = new PrimitiveArrayAllocationNode(fileName, token.beginLine);
        a.type = p;
        a.expressions = list;
        return a;
    }
|
    "new" n=Name()
    ( args=Arguments()
        {
            ConstructorCallNode c = new ConstructorCallNode(fileName, token.beginLine);
            c.name = n;
            c.args = args;
            return c;
        }
    | list=ArrayDimensions()
    {
        ObjectArrayAllocationNode o = new ObjectArrayAllocationNode(fileName, token.beginLine);
        o.type = Types.fromFullyQualifiedClass(n.primaryName);
        o.expressions = list;
        return o;
    } )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
ArrayList<Expression> ArrayDimensions() :
{
    ArrayList<Expression> e = new ArrayList<Expression>();
    Expression temp;
}
{
    ( LOOKAHEAD(2) "[" temp=Expression() { e.add(temp); }"]" )+
    ( LOOKAHEAD(2) "[" "]" { e.add(null); })*
    {
        return e;
    }
}


/*
 * Statement syntax follows.
 */

StatementNode Statement() :
{
    StatementNode s;
}
{
    LOOKAHEAD(2)
    s=LabeledStatement()
    {
        return s;
    }
|
    s=Block()
    {
        return s;
    }
|
    EmptyStatement()
    {
        return new NoOp(fileName, token.beginLine);
    }
|
    s=StatementExpression() <SEMICOLON>
    {
        return s;
    }
|
    s=SwitchStatement()
    {
        return s;
    }
|
    s=IfStatement()
    {
        return s;
    }
|
    s=WhileStatement()
    {
        return s;
    }
|
    s=DoStatement()
    {
        return s;
    }
|
    s=ForStatement()
    {
        return s;
    }
|
    s=BreakStatement()
    {
        return s;
    }
|
    s=ContinueStatement()
    {
        return s;
    }
|
    s=ReturnStatement()
    {
        return s;
    }
|
    s=ThrowStatement()
    {
        return s;
    }
|
    s=SynchronizedStatement()
    {
        return s;
    }
|
    s=TryStatement()
    {
        return s;
    }
}

LabeledStatementNode LabeledStatement() :
{
    LabeledStatementNode l = new LabeledStatementNode(fileName, token.beginLine);
    Token t;
}
{
    t=<IDENTIFIER> { l.name = t.image; } ":" l.statement=Statement()
    {
        return l;
    }
}

BlockNode Block() :
{
    int line = token.beginLine;
    ArrayList<BlockStatementNode> statements = new ArrayList<BlockStatementNode>();
    BlockStatementNode s;
}
{
    <LBRACE> ( s=BlockStatement()
    { statements.add(s); } )* <RBRACE>
    {
        return new BlockNode(fileName, line, statements);
    }
}

BlockStatementNode BlockStatement() :
{
    BlockStatementNode b;
}
{
    LOOKAHEAD(Type() <IDENTIFIER>)
    b=LocalVariableDeclaration() <SEMICOLON>
    {
        return b;
    }
|
    b=Statement()
    {
        return b;
    }
}

LocalVariableDecNode LocalVariableDeclaration() :
{
    Types type;
    ArrayList<VariableDecNode> declarations = new ArrayList<VariableDecNode>();
    VariableDecNode temp;
}
{
    type=Type() temp=VariableDeclarator() { declarations.add(temp); }
    ( <COMMA> temp=VariableDeclarator() { declarations.add(temp); })*
    {
        return new LocalVariableDecNode(fileName, token.beginLine, type, declarations);
    }
}

// don't need a return type here
void EmptyStatement() :
{}
{
    <SEMICOLON>
}

StatementExprNode StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
{
    StatementExprNode e;
}
{
    e=PreIncrementExpression()
    {
        return e;
    }
|
    e=PreDecrementExpression()
    {
        return e;
    }
|
    LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
    e=Assignment()
    {
        return e;
    }
|
    e=PostfixExpression()
    {
        return e;
    }
}

SwitchStatementNode SwitchStatement() :
{
    Expression expression; // switch(expression)
    ArrayList<SwitchStatementPart> parts = new ArrayList<SwitchStatementPart>(); // label: (Statements)*

    SwitchLabelNode tempLabel;
    ArrayList<BlockStatementNode> statements = new ArrayList<BlockStatementNode>();
    BlockStatementNode tempExpression;
}
{
    <SWITCH> <LPAREN> expression=Expression() <RPAREN> <LBRACE>
        ( tempLabel=SwitchLabel()
            ( tempExpression=BlockStatement() { statements.add(tempExpression); } )*
            {
                parts.add(new SwitchStatementPart(fileName, token.beginLine, tempLabel, statements));
            }
        )*
    <RBRACE>
    {
        return new SwitchStatementNode(fileName, token.beginLine, expression, parts);
    }
}

SwitchLabelNode SwitchLabel() :
{
    Expression expr;
}
{
  <CASE> expr=Expression() <COLON> { return new SwitchLabelNode(fileName, token.beginLine, expr); }
|
  <_DEFAULT> <COLON> { return new SwitchLabelNode(fileName, token.beginLine, null); }
}

IfStatementNode IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 * This also does handle the if .. else if ... else ...
 * as the second if is part of the last expression thing.
 */
{
    Expression expr;
    StatementNode truePart;
    StatementNode falsePart = null;
}
{
    <IF> <LPAREN> expr=Expression() <RPAREN>
    truePart=Statement() [ LOOKAHEAD(1) <ELSE> falsePart=Statement() ]
    {
        return new IfStatementNode(fileName, token.beginLine, expr, truePart, falsePart);
    }
}

WhileStatementNode WhileStatement() :
{
    Expression expression;
    StatementNode statement;
}
{
    <WHILE> <LPAREN> expression=Expression() <RPAREN>
    statement=Statement()
    {
        return new WhileStatement(fileName, token.beginLine, expression, statement);
    }
}

DoStatementNode DoStatement() :
{
    Expression expression;
    StatementNode statement;
}
{
    <DO> statement=Statement() <WHILE> <LPAREN>
    expression=Expression() <RPAREN> <SEMICOLON>
    {
        return new DoStatementNode(fileName, token.beginLine, expression, statement);
    }
}

ForStatementNode ForStatement() :
{
    ForStatementNode f = new ForStatementNode(fileName, token.beginLine);
}
{
    <FOR> <LPAREN> [ f.init=ForInit() ] <SEMICOLON>
    [ f.condition=Expression() ] <SEMICOLON>
    [ f.update=ForUpdate() ] <RPAREN> f.block=Statement()
    {
        return f;
    }
}

ForInitNode ForInit() :
{
    ForInitNode f = new ForInitNode(fileName, token.beginLine);
}
{
    LOOKAHEAD( Type() <IDENTIFIER> )
    f.dec=LocalVariableDeclaration()
    {
        return f;
    }
|
    f.items=StatementExpressionList()
    {
        return f;
    }
}

ArrayList<StatementExprNode> StatementExpressionList() :
{
    ArrayList<StatementExprNode> s = new ArrayList<StatementExprNode>();
    StatementExprNode temp;
}
{
    temp=StatementExpression() { s.add(temp); }
    ( <COMMA> temp=StatementExpression() { s.add(temp); } )*
    {
        return s;
    }
}

ArrayList<StatementExprNode> ForUpdate() :
{
    /* This rule is just a statement expression list */
    ArrayList<StatementExprNode> t;
}
{
    t=StatementExpressionList()
    {
        return t;
    }
}

BreakStatementNode BreakStatement() :
{
    BreakStatementNode b = new BreakStatementNode(fileName, token.beginLine);
    Token t;
}
{
    <BREAK> [ t=<IDENTIFIER> { b.name = t.image; }] <SEMICOLON>
    {
        return b;
    }
}

ContinueStatementNode ContinueStatement() :
{
    ContinueStatementNode c = new ContinueStatementNode(fileName, token.beginLine);
    Token t;
}
{
    <CONTINUE> [ t=<IDENTIFIER> { c.name = t.image; } ] <SEMICOLON>
    {
        return c;
    }
}

ReturnStatementNode ReturnStatement() :
{
    ReturnStatementNode r =  new ReturnStatementNode(fileName, token.beginLine);
}
{
    <RETURN> [ r.expression=Expression() ] <SEMICOLON>
    {
        return r;
    }
}

ThrowStatementNode ThrowStatement() :
{
    ThrowStatementNode t = new ThrowStatementNode(fileName, token.beginLine);
}
{
    <THROW> t.expression=Expression() <SEMICOLON>
    {
        return t;
    }
}

SynchronizedStatementNode SynchronizedStatement() :
{
    SynchronizedStatementNode s = new SynchronizedStatementNode(fileName, token.beginLine);
}
{
    <SYNCHRONIZED> <LPAREN> s.expression=Expression()
    <RPAREN> s.block=Block()
    {
        return s;
    }
}

TryStatementNode TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
    TryStatementNode t = new TryStatementNode(fileName, token.beginLine);
    t.catchParams = new ArrayList<ParamNode>();
    t.catchBlocks = new ArrayList<BlockNode>();
    ParamNode temp;
    BlockNode temp2;
}
{
    <TRY> t.block=Block()
    ( <CATCH> <LPAREN> temp=FormalParameter() { t.catchParams.add(temp); } <RPAREN>
     temp2=Block() { t.catchBlocks.add(temp2); } )*
    [ <FINALLY> t.finallyPart=Block() ]
    {
        return t;
    }
}
