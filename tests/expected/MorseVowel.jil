// file: MorseVowel.jil

structure static
	int n;
	char[] contents;
end structure

function static main (args<reference(java/lang/String)[]> ) returns void
	StartScope sc - reference(java/util/Scanner);
	getStaticField in of java/lang/System to %r2;
	allocateType %r1 = java/util/Scanner;
	callVirtual %r1 <init>(%r2) -> %r4;
	copy %r3 = %r1;
	PutLocal sc = %r4;
	getLocal %r5 = sc;
	callVirtual %r5 nextLine() -> %r7;
	StartScope line - reference(java/lang/String);
	getLocal %r8 = sc;
	callVirtual %r8 nextLine() -> %r10;
	PutLocal line = %r10;
	getLocal %r11 = sc;
	callVirtual %r11 close() -> %r13;
	getLocal %r14 = line;
	callVirtual %r14 length() -> %r16;
	getParam %r17 = this;
	getInstanceFieldAddress n of %r17 to %i18;
	store %r16 at %i18;
	copy %r19 = %r16;
	getParam %r20 = this;
	getInstanceField n of %r20 to %i21;
	intermediate.CreateArrayStatement@57829d67
	getParam %r23 = this;
	getInstanceFieldAddress contents of %r23 to %r24;
	store %r22 at %r24;
	copy %r25 = %r22;
	StartScope i - int;
	load 0 to %i26;
	PutLocal i = %i26;
	L_COND_27: ;
	getLocal %i29 = i;
	getParam %r30 = this;
	getInstanceField n of %r30 to %i31;
	setCondition %t32 = %i29 < %i31;
	branch when %t32 == 0 to L_END_28;
	getLocal %r33 = line;
	getLocal %i35 = i;
	callVirtual %r33 charAt(%i35) -> %r36;
	getParam %r37 = this;
	getInstanceField contents of %r37 to %r38;
	getLocal %i39 = i;
	getArrayValue %r40 = %r38 @ %i39;
	store %r36 at %r40;
	copy %r41 = %r36;
	EndScope i;
	getLocal %i42 = i;
	load 1 to %i43;
	%i44 = %i42 43 %i43;
	getLocalAddress %i45 = i;
	store %i44 at %i45;
	copy %i46 = %i44;
	L_END_28: ;
	getStaticField out of java/lang/System to %r47;
	getParam %r49 = this;
	callVirtual %r49 combos() -> %r51;
	callVirtual %r47 println(%r51) -> %r52;
end function
function static combos () returns long
	StartScope results - long[];
	getParam %r1 = this;
	getInstanceField n of %r1 to %i2;
	load 1 to %i3;
	%i4 = %i2 43 %i3;
	intermediate.CreateArrayStatement@19dfb72a
	PutLocal results = %r5;
	load 1 to %i6;
	getLocal %r7 = results;
	load 0 to %i8;
	getArrayValue %r9 = %r7 @ %i8;
	store %i6 at %r9;
	copy %i10 = %i6;
	StartScope i - int;
	load 1 to %i11;
	PutLocal i = %i11;
	L_COND_12: ;
	getLocal %i14 = i;
	getParam %r15 = this;
	getInstanceField n of %r15 to %i16;
	setCondition %t17 = %i14 <= %i16;
	branch when %t17 == 0 to L_END_13;
	getParam %r20 = this;
	load 'e' to %c22;
	getParam %r23 = this;
	getInstanceField n of %r23 to %i24;
	getLocal %i25 = i;
	%i26 = %i25 45 %i24;
	callVirtual %r20 matches(%c22, %i26) -> %r27;
	branch when %r27 == 0 to L_ELSE18;
	getLocal %r28 = results;
	getLocal %i29 = i;
	getArrayValue %r30 = %r28 @ %i29;
	getLocal %r31 = results;
	getLocal %i32 = i;
	load 1 to %i33;
	%i34 = %i33 45 %i32;
	getArrayValue %r35 = %r31 @ %i34;
	%r36 = %r30 43 %r35;
	getLocal %r37 = results;
	getLocal %i38 = i;
	getArrayValue %r39 = %r37 @ %i38;
	store %r36 at %r39;
	copy %r40 = %r36;
	jump L_END19;
	L_ELSE18: ;
	L_END19: ;
	getLocal %i43 = i;
	load 2 to %i44;
	setCondition %t45 = %i43 >= %i44;
	branch when %t45 == 0 to L_ELSE41;
	getParam %r48 = this;
	load 'a' to %c50;
	getParam %r51 = this;
	getInstanceField n of %r51 to %i52;
	getLocal %i53 = i;
	%i54 = %i53 45 %i52;
	callVirtual %r48 matches(%c50, %i54) -> %r55;
	branch when %r55 == 0 to L_ELSE46;
	getLocal %r56 = results;
	getLocal %i57 = i;
	getArrayValue %r58 = %r56 @ %i57;
	getLocal %r59 = results;
	getLocal %i60 = i;
	load 2 to %i61;
	%i62 = %i61 45 %i60;
	getArrayValue %r63 = %r59 @ %i62;
	%r64 = %r58 43 %r63;
	getLocal %r65 = results;
	getLocal %i66 = i;
	getArrayValue %r67 = %r65 @ %i66;
	store %r64 at %r67;
	copy %r68 = %r64;
	jump L_END47;
	L_ELSE46: ;
	L_END47: ;
	getParam %r71 = this;
	load 'i' to %c73;
	getParam %r74 = this;
	getInstanceField n of %r74 to %i75;
	getLocal %i76 = i;
	%i77 = %i76 45 %i75;
	callVirtual %r71 matches(%c73, %i77) -> %r78;
	branch when %r78 == 0 to L_ELSE69;
	getLocal %r79 = results;
	getLocal %i80 = i;
	getArrayValue %r81 = %r79 @ %i80;
	getLocal %r82 = results;
	getLocal %i83 = i;
	load 2 to %i84;
	%i85 = %i84 45 %i83;
	getArrayValue %r86 = %r82 @ %i85;
	%r87 = %r81 43 %r86;
	getLocal %r88 = results;
	getLocal %i89 = i;
	getArrayValue %r90 = %r88 @ %i89;
	store %r87 at %r90;
	copy %r91 = %r87;
	jump L_END70;
	L_ELSE69: ;
	L_END70: ;
	jump L_END42;
	L_ELSE41: ;
	L_END42: ;
	getLocal %i94 = i;
	load 3 to %i95;
	setCondition %t96 = %i94 >= %i95;
	branch when %t96 == 0 to L_ELSE92;
	getParam %r99 = this;
	load 'o' to %c101;
	getParam %r102 = this;
	getInstanceField n of %r102 to %i103;
	getLocal %i104 = i;
	%i105 = %i104 45 %i103;
	callVirtual %r99 matches(%c101, %i105) -> %r106;
	branch when %r106 == 0 to L_ELSE97;
	getLocal %r107 = results;
	getLocal %i108 = i;
	getArrayValue %r109 = %r107 @ %i108;
	getLocal %r110 = results;
	getLocal %i111 = i;
	load 3 to %i112;
	%i113 = %i112 45 %i111;
	getArrayValue %r114 = %r110 @ %i113;
	%r115 = %r109 43 %r114;
	getLocal %r116 = results;
	getLocal %i117 = i;
	getArrayValue %r118 = %r116 @ %i117;
	store %r115 at %r118;
	copy %r119 = %r115;
	jump L_END98;
	L_ELSE97: ;
	L_END98: ;
	getParam %r122 = this;
	load 'u' to %c124;
	getParam %r125 = this;
	getInstanceField n of %r125 to %i126;
	getLocal %i127 = i;
	%i128 = %i127 45 %i126;
	callVirtual %r122 matches(%c124, %i128) -> %r129;
	branch when %r129 == 0 to L_ELSE120;
	getLocal %r130 = results;
	getLocal %i131 = i;
	getArrayValue %r132 = %r130 @ %i131;
	getLocal %r133 = results;
	getLocal %i134 = i;
	load 3 to %i135;
	%i136 = %i135 45 %i134;
	getArrayValue %r137 = %r133 @ %i136;
	%r138 = %r132 43 %r137;
	getLocal %r139 = results;
	getLocal %i140 = i;
	getArrayValue %r141 = %r139 @ %i140;
	store %r138 at %r141;
	copy %r142 = %r138;
	jump L_END121;
	L_ELSE120: ;
	L_END121: ;
	jump L_END93;
	L_ELSE92: ;
	L_END93: ;
	EndScope i;
	getLocal %i143 = i;
	load 1 to %i144;
	%i145 = %i143 43 %i144;
	getLocalAddress %i146 = i;
	store %i145 at %i146;
	copy %i147 = %i145;
	L_END_13: ;
	getLocal %r148 = results;
	getStaticField length of contents to %r149;
	getArrayValue %r150 = %r148 @ %r149;
	return %r150;
end function
function static matches (value<char> offset<int> ) returns bool
	getParam %c3 = value;
	load 'a' to %c4;
	setCondition %b5 = %c3 == %c4;
	branch when %b5 == 0 to L_ELSE1;
	getParam %r6 = this;
	getInstanceField contents of %r6 to %r7;
	getParam %i8 = offset;
	getArrayValue %r9 = %r7 @ %i8;
	load '.' to %c10;
	setCondition %b11 = %r9 == %c10;
	branch when unknown register type: 9 == 0 to L_12;
	getParam %r13 = this;
	getInstanceField contents of %r13 to %r14;
	getParam %i15 = offset;
	load 1 to %i16;
	%i17 = %i15 43 %i16;
	getArrayValue %r18 = %r14 @ %i17;
	load '-' to %c19;
	setCondition %b20 = %r18 == %c19;
	L_12: ;
	%t21 = choose(unknown register type: 9, %b20);
	return %t21;
	jump L_END2;
	L_ELSE1: ;
	getParam %c24 = value;
	load 'e' to %c25;
	setCondition %b26 = %c24 == %c25;
	branch when %b26 == 0 to L_ELSE22;
	getParam %r27 = this;
	getInstanceField contents of %r27 to %r28;
	getParam %i29 = offset;
	getArrayValue %r30 = %r28 @ %i29;
	load '.' to %c31;
	setCondition %b32 = %r30 == %c31;
	return %b32;
	jump L_END23;
	L_ELSE22: ;
	getParam %c35 = value;
	load 'i' to %c36;
	setCondition %b37 = %c35 == %c36;
	branch when %b37 == 0 to L_ELSE33;
	getParam %r38 = this;
	getInstanceField contents of %r38 to %r39;
	getParam %i40 = offset;
	getArrayValue %r41 = %r39 @ %i40;
	load '.' to %c42;
	setCondition %b43 = %r41 == %c42;
	branch when unknown register type: 9 == 0 to L_44;
	getParam %r45 = this;
	getInstanceField contents of %r45 to %r46;
	getParam %i47 = offset;
	load 1 to %i48;
	%i49 = %i47 43 %i48;
	getArrayValue %r50 = %r46 @ %i49;
	load '.' to %c51;
	setCondition %b52 = %r50 == %c51;
	L_44: ;
	%t53 = choose(unknown register type: 9, %b52);
	return %t53;
	jump L_END34;
	L_ELSE33: ;
	getParam %c56 = value;
	load 'o' to %c57;
	setCondition %b58 = %c56 == %c57;
	branch when %b58 == 0 to L_ELSE54;
	getParam %r59 = this;
	getInstanceField contents of %r59 to %r60;
	getParam %i61 = offset;
	getArrayValue %r62 = %r60 @ %i61;
	load '-' to %c63;
	setCondition %b64 = %r62 == %c63;
	branch when unknown register type: 9 == 0 to L_65;
	getParam %r66 = this;
	getInstanceField contents of %r66 to %r67;
	getParam %i68 = offset;
	load 1 to %i69;
	%i70 = %i68 43 %i69;
	getArrayValue %r71 = %r67 @ %i70;
	load '-' to %c72;
	setCondition %b73 = %r71 == %c72;
	L_65: ;
	%t74 = choose(unknown register type: 9, %b73);
	branch when unknown register type: 9 == 0 to L_75;
	getParam %r76 = this;
	getInstanceField contents of %r76 to %r77;
	getParam %i78 = offset;
	load 2 to %i79;
	%i80 = %i78 43 %i79;
	getArrayValue %r81 = %r77 @ %i80;
	load '-' to %c82;
	setCondition %b83 = %r81 == %c82;
	L_75: ;
	%t84 = choose(unknown register type: 9, %b83);
	return %t84;
	jump L_END55;
	L_ELSE54: ;
	getParam %c87 = value;
	load 'u' to %c88;
	setCondition %b89 = %c87 == %c88;
	branch when %b89 == 0 to L_ELSE85;
	getParam %r90 = this;
	getInstanceField contents of %r90 to %r91;
	getParam %i92 = offset;
	getArrayValue %r93 = %r91 @ %i92;
	load '.' to %c94;
	setCondition %b95 = %r93 == %c94;
	branch when unknown register type: 9 == 0 to L_96;
	getParam %r97 = this;
	getInstanceField contents of %r97 to %r98;
	getParam %i99 = offset;
	load 1 to %i100;
	%i101 = %i99 43 %i100;
	getArrayValue %r102 = %r98 @ %i101;
	load '.' to %c103;
	setCondition %b104 = %r102 == %c103;
	L_96: ;
	%t105 = choose(unknown register type: 9, %b104);
	branch when unknown register type: 9 == 0 to L_106;
	getParam %r107 = this;
	getInstanceField contents of %r107 to %r108;
	getParam %i109 = offset;
	load 2 to %i110;
	%i111 = %i109 43 %i110;
	getArrayValue %r112 = %r108 @ %i111;
	load '-' to %c113;
	setCondition %b114 = %r112 == %c113;
	L_106: ;
	%t115 = choose(unknown register type: 9, %b114);
	return %t115;
	jump L_END86;
	L_ELSE85: ;
	L_END86: ;
	L_END55: ;
	L_END34: ;
	L_END23: ;
	L_END2: ;
	load "Char: " to %r117;
	getParam %c118 = value;
	%b119 = %r117 43 %c118;
	allocateType %r116 = java/lang/IllegalArgumentException;
	callVirtual %r116 <init>(%b119) -> %r121;
	copy %r120 = %r116;
	throw %r121;
end function

