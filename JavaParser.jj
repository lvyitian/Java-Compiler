/**
* @author Zach Jones (zachtjones16@gmail.com)
* This file generates the parser, using JavaCC
* Some parts of this file are taken from the examples in JavaCC documentation.
*/

PARSER_BEGIN(JavaParser)
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import tree.*;
import java.util.ArrayList;

public class JavaParser {

    public static CompilationUnit parse(String file) throws FileNotFoundException, ParseException {
        JavaParser parser = new JavaParser(new FileInputStream(file));
        return parser.CompilationUnit();
    }

}

PARSER_END(JavaParser)

/* Now specify the lexer commands */

SKIP : /* WHITE SPACE */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SPECIAL_TOKEN : /* Comments and Annotations */
{
  <LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <BLOCK_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <ANNOTATION: "@" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|   < #LETTER: [ "A"-"Z", "a"-"z", "_" ] >
|   < #DIGIT: [ "0"-"9" ] >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*************  ACTUAL GRAMMAR NOW *******/
// the whole file is a compilation unit
CompilationUnit CompilationUnit() :
{
    CompilationUnit c = new CompilationUnit();
    ImportNode temp;
    TypeDecNode temp2;
}
{
    [ c.packageName=PackageDeclaration() ]
    ( temp=ImportDeclaration() { c.imports.add(temp); } )*
    ( temp2=TypeDeclaration() { c.types.add(temp2); })*
    <EOF>
    {
        return c;
    }
}

NameNode PackageDeclaration() :
{
    NameNode n;
}
{
    "package" n=Name() ";"
    {
        return n;
    }
}

ImportNode ImportDeclaration() :
{
    ImportNode n = new ImportNode();
}
{
    <IMPORT> n.name=Name()
    [ <DOT> <STAR> { n.isAll = true; } ]
    <SEMICOLON>
    {
        return n;
    }
}

TypeDecNode TypeDeclaration() :
{
    TypeDecNode t = new TypeDecNode();
}
{
    LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
    t.c=ClassDeclaration()
    { return t; }

|   LOOKAHEAD( ( "abstract" | "public")* "interface" )
    t.i=InterfaceDeclaration()
    { return t; }

|   t.e=EnumDeclaration()
    { return t; }

|   <SEMICOLON>
    { return t; }
}


/*
 * Declaration syntax follows.
 */

ClassNode ClassDeclaration() :
{
    ClassNode c = new ClassNode();
    Token t;
    ClassBodyNode b;
}
{
    ( <ABSTRACT> { c.isAbstract=true; }
        | <FINAL> { c.isFinal=true; }
        | <PUBLIC> { c.isPublic=true; } )*
    <CLASS> t=<IDENTIFIER> [ c.typeParams=ClassTypeParameters() ]
    [ <EXTENDS> c.superclass=Name() ]
    [ <IMPLEMENTS> c.interfaces=NameList() ]
    <LBRACE> ( b=ClassBodyDeclaration() { c.body.add(b); } )* <RBRACE>
    {
        c.name = t.image;
        return c;
    }
}

ArrayList<NameNode> ClassTypeParameters() :
{
    ArrayList<NameNode> n = new ArrayList<NameNode>();
    NameNode temp;
}
{
    <LT> temp=Name() { n.add(temp); }
    ( <COMMA> temp=Name() { n.add(temp); })* <GT>
    {
        return n;
    }
}

ClassBodyNode ClassBodyDeclaration() :
{
    ClassBodyNode c = new ClassBodyNode();
}
{
    LOOKAHEAD(2)
    c.staticInit=StaticInitializer()
    {
        return c;
    }
|
    LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
    c.constructor=ConstructorDeclaration()
    {
        return c;
    }
|
    LOOKAHEAD( MethodDeclarationLookahead() )
    c.method=MethodDeclaration()
    {
        return c;
    }
|
    c.field=FieldDeclaration()
    {
        return c;
    }
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() <IDENTIFIER> "("
}

InterfaceNode InterfaceDeclaration() :
{
    InterfaceNode i = new InterfaceNode();
    Token t;
}
{
    ( <ABSTRACT> | <PUBLIC> )*
    <INTERFACE> t=<IDENTIFIER> { i.name = t.image; }
    [ <EXTENDS> i.supers=NameList() ]
    "{" ( InterfaceMemberDeclaration() )* "}"
    {
        return i;
    }
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

EnumNode EnumDeclaration() :
{
    EnumNode e = new EnumNode();
    Token t;
}
{
    (<PUBLIC>)* <ENUM> t=<IDENTIFIER> {e.name = t.image; }
    <LBRACE> e.values=EnumBody() <RBRACE>
    {
        return e;
    }
}

ArrayList<String> EnumBody() :
{
    ArrayList<String> a = new ArrayList<String>();
    Token t;
}
{ // the constants that could be the values of the ENUM
    t=<IDENTIFIER> { a.add(t.image); }
    ("," t=<IDENTIFIER> { a.add(t.image); })*
    {
        return a;
    }
}

FieldDeclarationNode FieldDeclaration() :
{
    FieldDeclarationNode f = new FieldDeclarationNode();
    VariableDecNode v;
}
{
    ( <PUBLIC> { f.isPublic=true; } | <PROTECTED> { f.isProtected=true; }
    | <PRIVATE> { f.isPrivate=true; } | <STATIC> { f.isStatic=true; }
    | <FINAL> { f.isFinal=true; } | <TRANSIENT> { f.isTransient=true; }
    | <VOLATILE> { f.isVolatile=true; } )*
    f.type=Type() v=VariableDeclarator() { f.variables.add(v); }
    ( "," v=VariableDeclarator() { f.variables.add(v); } )* ";"
    {
        return f;
    }
}

VariableDecNode VariableDeclarator() :
{
    VariableDecNode v = new VariableDecNode();
}
{
    v.id=VariableDeclaratorId() [ "=" v.init=VariableInitializer() ]
    {
        return v;
    }
}

VariableIdNode VariableDeclaratorId() :
{
    VariableIdNode v = new VariableIdNode();
    Token t;
}
{
    t=<IDENTIFIER>{ v.name=t.image; }
    ( <LBRACKET> <RBRACKET> {v.numDimensions++; } )*
    {
        return v;
    }
}

VariableInitializerNode VariableInitializer() :
{
    VariableInitializerNode n = new VariableInitializerNode();
    VariableInitializerNode temp;
}
{
    <LBRACE> [ temp=VariableInitializer() { n.nextLevel.add(temp); }
    ( LOOKAHEAD(2) <COMMA> temp=VariableInitializer() { n.nextLevel.add(temp); } )* ] [ "," ] <RBRACE>
    {
        return n;
    }
|
    n.e=Expression()
    {
        return n;
    }
}

MethodNode MethodDeclaration() :
{
    MethodNode m = new MethodNode();
}
{
    ( <PUBLIC> { m.isPublic=true;} | <PROTECTED> { m.isProtected=true; }
    | <PRIVATE> { m.isPrivate=true; } | <STATIC> { m.isStatic=true; }
    | <ABSTRACT> { m.isAbstract=true; } | <FINAL> { m.isFinal=true; }
    | <NATIVE> { m.isNative=true; } | <SYNCHRONIZED> { m.isSynchronized=true; } )*
    m.resultType=ResultType() m.dec=MethodDeclarator() [ <THROWS> m.throwsList=NameList() ]
    ( m.code=Block() | ";" )
    {
        return m;
    }
}

MethodDeclaratorNode MethodDeclarator() :
{
    MethodDeclaratorNode m = new MethodDeclaratorNode();
    Token t;
}
{
    t=<IDENTIFIER> { m.name = t.image; }
    m.params=FormalParameters() ( <LBRACKET> <RBRACKET>{ m.arrayDims ++; } )*
    {
        return m;
    }
}

ArrayList<ParamNode> FormalParameters() :
{
    ArrayList<ParamNode> p = new ArrayList<ParamNode>();
    ParamNode temp;
}
{
    <LPAREN> [ temp=FormalParameter() { p.add(temp); }
    ( <COMMA> temp=FormalParameter() { p.add(temp); })* ] <RPAREN>
    {
        return p;
    }
}

ParamNode FormalParameter() :
{
    ParamNode p = new ParamNode();
}
{
    p.type=Type() p.id=VariableDeclaratorId()
    {
        return p;
    }
}

ConstructorNode ConstructorDeclaration() :
{
    ConstructorNode c = new ConstructorNode();
    Token t;
    BlockStatementNode b;
}
{
    [ <PUBLIC> { c.isPublic = true; }
    | <PROTECTED> {c.isProtected = true;}
    | <PRIVATE> {c.isPrivate = true; } ]
    t=<IDENTIFIER> { c.name = t.image; }
    c.params=FormalParameters()
    [ <THROWS> c.throwsList=NameList() ]
    <LBRACE> [ LOOKAHEAD(2) ExplicitConstructorInvocation() ]
    ( b=BlockStatement() { c.code.add(b); } )* <RBRACE>
    {
        return c;
    }
}

void ExplicitConstructorInvocation() :
{}
{
  "this" Arguments() ";"
|
  "super" Arguments() ";"
}

BlockNode StaticInitializer() :
{
    BlockNode b;
}
{
  "static" b=Block() { return b; }
}


/*
 * Type, name and expression syntax follows.
 */

TypeNode Type() :
{
    TypeNode t = new TypeNode();
}
{
    ( t.primitive=PrimitiveType() | t.name=Name() )
    ( <LBRACKET> <RBRACKET>{ t.arrayDims++; } )*
    { return t; }
}

PrimitiveTypeNode PrimitiveType() :
{
    PrimitiveTypeNode t = new PrimitiveTypeNode();
}
{
    <BOOLEAN> { t.type = PrimitiveTypeNode.BOOLEAN; return t; }
|   <CHAR> { t.type = PrimitiveTypeNode.CHAR; return t; }
|   <BYTE> { t.type = PrimitiveTypeNode.BYTE; return t; }
|   <SHORT> { t.type = PrimitiveTypeNode.SHORT; return t; }
|   <INT> { t.type = PrimitiveTypeNode.INT; return t; }
|   <LONG> { t.type = PrimitiveTypeNode.LONG; return t; }
|   <FLOAT> { t.type = PrimitiveTypeNode.FLOAT; return t; }
|   <DOUBLE> { t.type = PrimitiveTypeNode.DOUBLE; return t; }
}

ResultTypeNode ResultType() :
{
    ResultTypeNode r = new ResultTypeNode();
}
{
  <VOID> { r.isVoid = true; return r; }
|
  r.type=Type() { return r; }
}

NameNode Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 * Also support generics, making this require even more lookahead
 */
{
    NameNode n = new NameNode();
    Token t;
}
{
    // could be X<Y extends Z>
    t=<IDENTIFIER> { n.primaryName = t.image; }
    ( LOOKAHEAD(<EXTENDS> Name()) <EXTENDS> n.extendsNode=Name())?
    ( LOOKAHEAD(<LT> NameList() <GT>) <LT> n.generics=NameList() <GT>)?
    ( LOOKAHEAD(2) "." n.secondaryName=Name()  )*
    {
        return n;
    }
}

ArrayList<NameNode> NameList() :
{
    ArrayList<NameNode> n = new ArrayList<NameNode>();
    NameNode temp;
}
{
    temp=Name(){ n.add(temp); }
    ( <COMMA> temp=Name() { n.add(temp); } )*
    {
        return n;
    }
}


/*
 * Expression syntax follows.
 */

ExpressionNode Expression() :
{
    ExpressionNode temp;
}
{
    LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
    temp=Assignment() { return temp; }
|
    temp=ConditionalExpression() { return temp; }
}

ExpressionNode Assignment() :
{
    ExpressionNode e = new ExpressionNode();
}
{
    e.op1 = PrimaryExpression()
    e.assignType = AssignmentOperator()
    e.op2 = Expression()
    {
        return e;
    }
}

int AssignmentOperator() :
{}
{
    "=" { return JavaParserConstants.ASSIGN; }
|   "*=" { return JavaParserConstants.STARASSIGN; }
|   "/=" { return JavaParserConstants.SLASHASSIGN; }
|   "%=" { return JavaParserConstants.REMASSIGN; }
|   "+=" { return JavaParserConstants.PLUSASSIGN; }
|   "-=" { return JavaParserConstants.MINUSASSIGN; }
|   "<<=" { return JavaParserConstants.LSHIFTASSIGN; }
|   ">>=" { return JavaParserConstants.RSIGNEDSHIFTASSIGN; }
|   ">>>=" { return JavaParserConstants.RUNSIGNEDSHIFTASSIGN; }
|   "&=" { return JavaParserConstants.ANDASSIGN; }
|   "^=" { return JavaParserConstants.XORASSIGN; }
|   "|=" { return JavaParserConstants.ORASSIGN; }
}

ExpressionNode ConditionalExpression() :
{
    ExpressionNode e = new ExpressionNode();
    ExpressionNode temp;
    ExpressionNode truePart = null;
    ExpressionNode falsePart = null;
}
{
    temp=ConditionalOrExpression()
    [ "?" truePart=Expression() ":" falsePart=ConditionalExpression() ]
    {
        if (truePart == null) {
            return temp;
        } else {
            e.op1 = temp;
            e.op2 = truePart;
            e.op3 = falsePart;
            return e;
        }
    }
}

ExpressionNode ConditionalOrExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    temp=ConditionalAndExpression() { e.ops.add(temp); }
    ( "||" temp=ConditionalAndExpression() { e.ops.add(temp); } )*
    {
        if (e.ops.size() == 1) { // not actually OR of any terms
            return temp; // just return the item
        } else {
            e.isConditionalOr = true;
            return e; // return the list
        }
    }
}

ExpressionNode ConditionalAndExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    temp=InclusiveOrExpression() { e.ops.add(temp); }
    ( "&&" temp=InclusiveOrExpression() { e.ops.add(temp); } )*
    {
        if (e.ops.size() == 1) { // not actually AND of any terms
            return temp;
        } else {
            e.isConditionalAnd = true;
            return e;
        }
    }
}

ExpressionNode InclusiveOrExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    temp=ExclusiveOrExpression() { e.ops.add(temp); }
    ( "|" ExclusiveOrExpression() )*
    {
        if (e.ops.size() == 1) { // not actually | of any terms
            return temp;
        } else {
            e.isBitwiseOr = true;
            return e;
        }
    }
}

ExpressionNode ExclusiveOrExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    temp=AndExpression() { e.ops.add(temp); }
    ( "^" AndExpression() { e.ops.add(temp); } )*
    {
        if (e.ops.size() == 1) { // not actually ^ of terms
            return temp;
        } else {
            e.isBitwiseXOr = true;
            return e;
        }
    }
}

ExpressionNode AndExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    temp=EqualityExpression() { e.ops.add(temp); }
    ( "&" temp=EqualityExpression() { e.ops.add(temp); } )*
    {
        if (e.ops.size() == 1) { // not actually & of terms
            return temp;
        } else {
            e.isBitwiseAnd = true;
            return e;
        }
    }
}

ExpressionNode EqualityExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    e.tokens = new ArrayList<Integer>();
    ExpressionNode temp;
    // catch here is that there could be == and != mixed

}
{
    temp=InstanceOfExpression() { e.ops.add(temp); }
    ( ( "==" { e.tokens.add(JavaParserConstants.EQ); }
      | "!=" { e.tokens.add(JavaParserConstants.NE); })
    temp=InstanceOfExpression() { e.ops.add(temp); })*
    {
        if (e.ops.size() == 1) { // not actually == or != expression
            return temp;
        } else {
            e.isEqualsCondition = true;
            return e;
        }
    }
}

ExpressionNode InstanceOfExpression() :
{
    ExpressionNode e = new ExpressionNode();
    ExpressionNode temp;
    TypeNode t;
}
{
    temp=RelationalExpression()
    [ "instanceof" t=Type() {
        e.op1 = temp;
        e.type1 = t;
        e.isInstanceOfExpression = true;
    } ]
    {
        if (e.isInstanceOfExpression) {
            return e;
        } else { // simple expression instead
            return temp;
        }
    }
}

ExpressionNode RelationalExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    e.tokens = new ArrayList<Integer>();
    ExpressionNode temp;
}
{
    temp=ShiftExpression() { e.ops.add(temp); }
    (
      ( "<" {e.tokens.add(JavaParserConstants.LT); }
      | ">" {e.tokens.add(JavaParserConstants.GT); }
      | "<=" {e.tokens.add(JavaParserConstants.LE);}
      | ">=" {e.tokens.add(JavaParserConstants.GE); })
      temp=ShiftExpression() { e.ops.add(temp); }
    )*
    {
        if (e.ops.size() == 1) { // not a relational expresssion
            return temp;
        } else {
            e.isRelationalExpression = true;
            return e;
        }
    }
}

ExpressionNode ShiftExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    e.tokens = new ArrayList<Integer>();
    ExpressionNode temp;
}
{
    temp=AdditiveExpression() { e.ops.add(temp); }
    ( ( "<<" { e.tokens.add(JavaParserConstants.LSHIFT); }
    |   ">>" { e.tokens.add(JavaParserConstants.RSIGNEDSHIFT); }
    |   ">>>" { e.tokens.add(JavaParserConstants.RUNSIGNEDSHIFT); })
    temp=AdditiveExpression() { e.ops.add(temp); })*
    {
        if (e.ops.size() == 1) { // not a shift expression
            return temp;
        } else {
            e.isShiftExpression = true;
            return e;
        }
    }
}

ExpressionNode AdditiveExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    e.tokens = new ArrayList<Integer>();
    ExpressionNode temp;
}
{
    temp=MultiplicativeExpression() { e.ops.add(temp); }
    ( ( "+" { e.tokens.add(JavaParserConstants.PLUS); }
    |   "-" { e.tokens.add(JavaParserConstants.MINUS); })
    temp=MultiplicativeExpression() { e.ops.add(temp); })*
    {
        if (e.ops.size() == 1) { // not additive expression
            return temp;
        } else {
            e.isAdditiveExpression = true;
            return e;
        }
    }
}

ExpressionNode MultiplicativeExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    e.tokens = new ArrayList<Integer>();
    ExpressionNode temp;
}
{
    temp=UnaryExpression() { e.ops.add(temp); }
    ( ( "*" { e.tokens.add(JavaParserConstants.STAR); }
    |   "/" { e.tokens.add(JavaParserConstants.SLASH); }
    |   "%" { e.tokens.add(JavaParserConstants.REM); })
    temp=UnaryExpression() { e.ops.add(temp); })*
    {
        if (e.ops.size() == 1) {
            return temp;
        } else {
            e.isMultiplicativeExpression = true;
            return e;
        }
    }
}

ExpressionNode UnaryExpression() :
{
    ExpressionNode e = new ExpressionNode();
}
{
    ( "+" | "-" {e.isUnaryMinusExpression = true; } )
    e.op1=UnaryExpression()
    {
        if (e.isUnaryMinusExpression) {
            return e;
        } else { // unary +, no meaning
            return e.op1; // don't need extra nodes
        }
    }
|
    e.op1=PreIncrementExpression()
    {
        e.isPreIncrementExpression = true;
        return e;
    }
|
    e.op1=PreDecrementExpression()
    {
        e.isPreDecrementExpression = true;
        return e;
    }
|
    e=UnaryExpressionNotPlusMinus()
    {
        return e;
    }
}

ExpressionNode PreIncrementExpression() :
{
    ExpressionNode e; // already know this is ++
}
{
    "++" e=PrimaryExpression()
    {
        return e;
    }
}

ExpressionNode PreDecrementExpression() :
{
    ExpressionNode e; // already know -- from previous rule
}
{
    "--" e=PrimaryExpression()
    {
        return e;
    }
}

ExpressionNode UnaryExpressionNotPlusMinus() :
{
    ExpressionNode e = new ExpressionNode();
}
{
    ( "~" { e.isBitwiseNotExpression = true;}
    | "!" { e.isLogicalNotExpression = true; })
    e.op1=UnaryExpression()
    {
        return e;
    }
|
    LOOKAHEAD( CastLookahead() )
    e=CastExpression()
    {
        return e;
    }
|
    e=PostfixExpression()
    {
        return e;
    }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

ExpressionNode PostfixExpression() :
{
    ExpressionNode e = new ExpressionNode();
}
{
    e.op1=PrimaryExpression()
    [ "++" { e.isPostIncrementExpression = true; return e;}
    | "--" { e.isPostDecrementExpression = true; return e;}]
    // neither so just return e.op1
    {
        return e.op1;
    }
}

ExpressionNode CastExpression() :
{
    ExpressionNode e = new ExpressionNode();
    PrimitiveTypeNode p;
}
{
    LOOKAHEAD(2)
    "(" e.primitiveType=PrimitiveType()
    ( "[" "]" { e.arrayDims++; } )* ")"
    e.op1=UnaryExpression()
    {
        return e;
    }
|
    "(" e.objectType=Name()
    ( "[" "]" { e.arrayDims++; })* ")"
    e.op1=UnaryExpressionNotPlusMinus()
    {
        return e;
    }
}

ExpressionNode PrimaryExpression() :
{
    ExpressionNode e = new ExpressionNode();
    e.ops = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    e.op1=PrimaryPrefix()
    ( temp=PrimarySuffix() { e.ops.add(temp); } )*
    {
        if (e.ops.size() == 0) {
            return e.op1; // just the prefix
        }
        return e; // the entire expression
    }
}

ExpressionNode PrimaryPrefix() :
{
    ExpressionNode e = new ExpressionNode();
    Token t;
}
{
    e.literalValue=Literal()
    {
        return e;
    }
|
    e.name=Name()
    {
        return e;
    }
|
    "this"
    {
        e.isThis = true;
        return e;
    }
|
    "super" "." t=<IDENTIFIER>
    {
        e.superIdentifier = t.image;
        return e;
    }
|
    // parentheses are for specifying tree order,
    // so don't need them in the result
    "(" e=Expression() ")"
    {
        return e;
    }
|
    e=AllocationExpression()
    {
        return e;
    }
}

ExpressionNode PrimarySuffix() :
{
    ExpressionNode e = new ExpressionNode();
    Token t;
}
{
    "[" e.op1=Expression() "]"
    {
        e.isArrayIndexExpression = true;
        return e;
    }
|
    "." t=<IDENTIFIER>
    {
        e.propertyIdentifier = t.image;
        return e;
    }
|
  Arguments()
}

String Literal() :
{
    Token t;
}
{
    t=<INTEGER_LITERAL> { return t.image; }
|   t=<FLOATING_POINT_LITERAL> { return t.image; }
|   t=<CHARACTER_LITERAL> { return t.image; }
|   t=<STRING_LITERAL> { return t.image; }
|   t=<TRUE> { return t.image; }
|   t=<FALSE> { return t.image; }
|   t=<NULL> { return t.image; }
}

ExpressionNode Arguments() :
{
    ExpressionNode e = new ExpressionNode();
    e.isArguments = true;
}
{
    "(" [ e.ops=ArgumentList() ] ")"
    {
        return e;
    }
}

ArrayList<ExpressionNode> ArgumentList() :
{
    ArrayList<ExpressionNode> a = new ArrayList<ExpressionNode>();
    ExpressionNode e;
}
{
    e=Expression() { a.add(e); }
    ( "," e=Expression() { a.add(e); })*
    {
        return a;
    }
}

ExpressionNode AllocationExpression() :
{
    ExpressionNode e = new ExpressionNode();
}
{
    LOOKAHEAD(2)
    "new" e.primitiveType=PrimitiveType() e.ops=ArrayDimensions()
    {
        e.isArrayAllocPrim = true;
        return e;
    }
|
    "new" e.name=Name() ( e.op1=Arguments()
    {
        e.isConstructorCall = true;
        return e;
    }
    | e.ops=ArrayDimensions()
    {
        e.isArrayAllocClass = true;
        return e;
    } )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
ArrayList<ExpressionNode> ArrayDimensions() :
{
    ArrayList<ExpressionNode> e = new ArrayList<ExpressionNode>();
    ExpressionNode temp;
}
{
    ( LOOKAHEAD(2) "[" temp=Expression() { e.add(temp); }"]" )+
    ( LOOKAHEAD(2) "[" "]" { e.add(null); })*
    {
        return e;
    }
}


/*
 * Statement syntax follows.
 */

StatementNode Statement() :
{
    StatementNode s = new StatementNode();
}
{
    LOOKAHEAD(2)
    s.labeled=LabeledStatement()
    {
        return s;
    }
|
    s.block=Block()
    {
        return s;
    }
|
    EmptyStatement()
    {
        s.isEmpty = false;
        return s;
    }
|
    s.statement=StatementExpression() <SEMICOLON>
    {
        return s;
    }
|
    s.switchNode=SwitchStatement()
    {
        return s;
    }
|
    s.ifNode=IfStatement()
    {
        return s;
    }
|
    s.whileNode=WhileStatement()
    {
        return s;
    }
|
    s.doNode=DoStatement()
    {
        return s;
    }
|
    s.forNode=ForStatement()
    {
        return s;
    }
|
    s.breakNode=BreakStatement()
    {
        return s;
    }
|
    s.continueNode=ContinueStatement()
    {
        return s;
    }
|
    s.returnNode=ReturnStatement()
    {
        return s;
    }
|
    s.throwNode=ThrowStatement()
    {
        return s;
    }
|
    s.synchNode=SynchronizedStatement()
    {
        return s;
    }
|
    s.tryNode=TryStatement()
    {
        return s;
    }
}

LabeledStatementNode LabeledStatement() :
{
    LabeledStatementNode l = new LabeledStatementNode();
    Token t;
}
{
    t=<IDENTIFIER> { l.name = t.image; } ":" l.statement=Statement()
    {
        return l;
    }
}

BlockNode Block() :
{
    BlockNode b = new BlockNode();
    b.statements = new ArrayList<BlockStatementNode>();
    BlockStatementNode s;
}
{
    <LBRACE> ( s=BlockStatement()
    { b.statements.add(s); } )* <RBRACE>
    {
        return b;
    }
}

BlockStatementNode BlockStatement() :
{
    BlockStatementNode b = new BlockStatementNode();
}
{
    LOOKAHEAD(Type() <IDENTIFIER>)
    b.dec=LocalVariableDeclaration() <SEMICOLON>
    {
        return b;
    }
|
    b.statement=Statement()
    {
        return b;
    }
}

LocalVariableDecNode LocalVariableDeclaration() :
{
    LocalVariableDecNode d = new LocalVariableDecNode();
    d.declarators = new ArrayList<VariableDecNode>();
    VariableDecNode temp;
}
{
    d.type=Type() temp=VariableDeclarator() { d.declarators.add(temp); }
    ( <COMMA> temp=VariableDeclarator() { d.declarators.add(temp); })*
    {
        return d;
    }
}

// don't need a return type here
void EmptyStatement() :
{}
{
    <SEMICOLON>
}

StatementExprNode StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
{
    StatementExprNode e = new StatementExprNode();
}
{
    e.expression=PreIncrementExpression()
    {
        e.isPreIncrement = true;
        return e;
    }
|
    e.expression=PreDecrementExpression()
    {
        e.isPreDecrement = true;
        return e;
    }
|
    LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
    e.expression=Assignment()
    {
        e.isAssignment = true;
        return e;
    }
|
    e.expression=PostfixExpression()
    {
        e.isPostfixExpression = true;
        return e;
    }
}

SwitchStatementNode SwitchStatement() :
{
    SwitchStatementNode s = new SwitchStatementNode();
    s.labels = new ArrayList<SwitchLabelNode>();
    s.statements = new ArrayList<ArrayList<BlockStatementNode>>();
    SwitchLabelNode temp;
    BlockStatementNode temp2;
    ArrayList<BlockStatementNode> currStatements = new ArrayList<BlockStatementNode>();
    /* This rule is a bit funky as you can have a variable number of statements
      in each labeled thing */
}
{
    <SWITCH> <LPAREN> s.expression=Expression() <RPAREN> <LBRACE>
        ( temp=SwitchLabel() { s.labels.add(temp); }
            ( temp2=BlockStatement() { currStatements.add(temp2); } )*
            {
                s.statements.add(currStatements);
                currStatements = new ArrayList<BlockStatementNode>();
            }
        )*
    <RBRACE>
    {
        return s;
    }
}

SwitchLabelNode SwitchLabel() :
{
    SwitchLabelNode s = new SwitchLabelNode();
}
{
  <CASE> s.expression=Expression() { return s; } <COLON>
|
  <_DEFAULT> { s.isDefault=true; return s; } <COLON>
}

IfStatementNode IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 * This also does handle the if .. else if ... else ...
 * as the second if is part of the last expression thing.
 */
{
    IfStatementNode i = new IfStatementNode();
}
{
    <IF> <LPAREN> i.expression=Expression() <RPAREN>
    i.statement=Statement() [ LOOKAHEAD(1) <ELSE> i.elsePart=Statement() ]
    {
        return i;
    }
}

WhileStatementNode WhileStatement() :
{
    WhileStatementNode w = new WhileStatementNode();
}
{
    <WHILE> <LPAREN> w.expression=Expression() <RPAREN>
    w.statement=Statement()
    {
        return w;
    }
}

DoStatementNode DoStatement() :
{
    DoStatementNode d = new DoStatementNode();
}
{
    <DO> d.statement=Statement() <WHILE> <LPAREN>
    d.expression=Expression() <RPAREN> <SEMICOLON>
    {
        return d;
    }
}

ForStatementNode ForStatement() :
{
    ForStatementNode f = new ForStatementNode();
}
{
    <FOR> <LPAREN> [ f.init=ForInit() ] <SEMICOLON>
    [ f.condition=Expression() ] <SEMICOLON>
    [ f.update=ForUpdate() ] <RPAREN> f.block=Statement()
    {
        return f;
    }
}

ForInitNode ForInit() :
{
    ForInitNode f = new ForInitNode();
}
{
    LOOKAHEAD( Type() <IDENTIFIER> )
    f.dec=LocalVariableDeclaration()
    {
        return f;
    }
|
    f.items=StatementExpressionList()
    {
        return f;
    }
}

ArrayList<StatementExprNode> StatementExpressionList() :
{
    ArrayList<StatementExprNode> s = new ArrayList<StatementExprNode>();
    StatementExprNode temp;
}
{
    temp=StatementExpression() { s.add(temp); }
    ( <COMMA> temp=StatementExpression() { s.add(temp); } )*
    {
        return s;
    }
}

ArrayList<StatementExprNode> ForUpdate() :
{
    /* This rule is just a statement expression list */
    ArrayList<StatementExprNode> t;
}
{
    t=StatementExpressionList()
    {
        return t;
    }
}

BreakStatementNode BreakStatement() :
{
    BreakStatementNode b = new BreakStatementNode();
    Token t;
}
{
    <BREAK> [ t=<IDENTIFIER> { b.name = t.image; }] <SEMICOLON>
    {
        return b;
    }
}

ContinueStatementNode ContinueStatement() :
{
    ContinueStatementNode c = new ContinueStatementNode();
    Token t;
}
{
    <CONTINUE> [ t=<IDENTIFIER> { c.name = t.image; } ] <SEMICOLON>
    {
        return c;
    }
}

ReturnStatementNode ReturnStatement() :
{
    ReturnStatementNode r =  new ReturnStatementNode();
}
{
    <RETURN> [ r.expression=Expression() ] <SEMICOLON>
    {
        return r;
    }
}

ThrowStatementNode ThrowStatement() :
{
    ThrowStatementNode t = new ThrowStatementNode();
}
{
    <THROW> t.expression=Expression() <SEMICOLON>
    {
        return t;
    }
}

SynchronizedStatementNode SynchronizedStatement() :
{
    SynchronizedStatementNode s = new SynchronizedStatementNode();
}
{
    <SYNCHRONIZED> <LPAREN> s.expression=Expression()
    <RPAREN> s.block=Block()
    {
        return s;
    }
}

TryStatementNode TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
    TryStatementNode t = new TryStatementNode();
    t.catchParams = new ArrayList<ParamNode>();
    ParamNode temp;
    BlockNode temp2;
}
{
    <TRY> t.block=Block()
    ( <CATCH> <LPAREN> temp=FormalParameter() { t.catchParams.add(temp); } <RPAREN>
     temp2=Block() { t.catchBlocks.add(temp2); } )*
    [ <FINALLY> t.finallyPart=Block() ]
    {
        return t;
    }
}
